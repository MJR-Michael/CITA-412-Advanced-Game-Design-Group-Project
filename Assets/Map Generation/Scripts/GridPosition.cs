using System;

[System.Serializable]
public struct GridPosition : IEquatable<GridPosition>
{
    public int x;
    public int z;

    public GridPosition(int x, int z)
    {
        this.x = x;
        this.z = z;
    }

    /// <summary>
    /// Smallest int values for x and z
    /// </summary>
    public static readonly GridPosition Invalid = new GridPosition(int.MinValue, int.MinValue);
    public static readonly GridPosition Zero = new GridPosition(0, 0);
    public static readonly GridPosition One = new GridPosition(1, 1);

    public static readonly GridPosition Forward = new GridPosition(0, 1);
    public static readonly GridPosition Rightward = new GridPosition(1, 0);
    public static readonly GridPosition LeftForward = new GridPosition(-1, 1);
    public static readonly GridPosition LeftBackward = new GridPosition(-1, -1);
    public static readonly GridPosition RightForward = new GridPosition(1, 1);
    public static readonly GridPosition RightBackward = new GridPosition(1, -1);

    //Auto-generated by Intellisense
    public override bool Equals(object obj)
    {
        return obj is GridPosition position &&
               x == position.x &&
               z == position.z;
    }

    //Interface Equatable for object comparison
    public bool Equals(GridPosition other)
    {
        return this == other;
    }

    //Auto-generated by Intellisense
    public override int GetHashCode()
    {
        return HashCode.Combine(x, z);
    }

    public override string ToString()
    {
        return $"({x}, {z})";
    }

    public static int GetManhattanDistance(GridPosition a, GridPosition b)
    {
        return (int)(MathF.Abs(a.x - b.x) + MathF.Abs(a.z - b.z));
    }

    public static bool operator ==(GridPosition a, GridPosition b)
    {
        return a.x == b.x && a.z == b.z;
    }

    public static bool operator !=(GridPosition a, GridPosition b)
    {
        return !(a == b);
    }

    public static GridPosition operator +(GridPosition a, GridPosition b)
    {
        return new GridPosition(a.x + b.x, a.z + b.z);
    }

    public static GridPosition operator -(GridPosition a, GridPosition b)
    {
        return new GridPosition(a.x - b.x, a.z - b.z);
    }

    public float Distance(GridPosition other)
    {
        //a^2 + b^2 = c^2 => c = +-sqrt(a^2 + b^2)
        float xSquared = MathF.Pow(x - other.x, 2);
        float zSquared = MathF.Pow(z - other.z, 2);

        float c = MathF.Sqrt(xSquared + zSquared);
        return c;
    }
}