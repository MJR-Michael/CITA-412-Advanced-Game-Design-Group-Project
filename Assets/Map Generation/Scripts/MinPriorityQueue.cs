using System;
using System.Collections.Generic;

//Unity does not support heap queues by default. ChatGPT supports code generation 24/7
//This code is now purely generated by ChatGPT
public class MinPriorityQueue<T>
{

    private readonly List<(T Item, float Priority)> _heap = new();

    public int Count() => _heap.Count;

    public void Enqueue(T item, float priority)
    {
        _heap.Add((item, priority));
        BubbleUp(_heap.Count - 1);
    }

    public T Dequeue()
    {
        if (_heap.Count == 0) throw new InvalidOperationException("Heap is empty.");

        T rootItem = _heap[0].Item;

        // Move last to root and shrink
        _heap[0] = _heap[_heap.Count - 1];
        _heap.RemoveAt(_heap.Count - 1);

        if (_heap.Count > 0)
            BubbleDown(0);

        return rootItem;
    }

    /// <summary>
    /// Removes all items from the heap.
    /// </summary>
    public void Clear()
    {
        _heap.Clear();
    }

    public T Peek()
    {
        if (_heap.Count == 0) throw new InvalidOperationException("Heap is empty.");
        return _heap[0].Item;
    }

    private void BubbleUp(int index)
    {
        while (index > 0)
        {
            int parent = (index - 1) / 2;
            if (_heap[index].Priority >= _heap[parent].Priority)
                break;

            Swap(index, parent);
            index = parent;
        }
    }

    private void BubbleDown(int index)
    {
        int lastIndex = _heap.Count - 1;

        while (true)
        {
            int left = 2 * index + 1;
            int right = 2 * index + 2;
            int smallest = index;

            if (left <= lastIndex && _heap[left].Priority < _heap[smallest].Priority)
                smallest = left;

            if (right <= lastIndex && _heap[right].Priority < _heap[smallest].Priority)
                smallest = right;

            if (smallest == index)
                break;

            Swap(index, smallest);
            index = smallest;
        }
    }

    private void Swap(int i, int j)
    {
        (T Item, float Priority) tmp = _heap[i];
        _heap[i] = _heap[j];
        _heap[j] = tmp;
    }

}
